模式
  # 命令模式
  # 插入模式
  # 替换模式
  # 终端模式
  # 可视模式
vim常用命令
  # 终端模式
    :start_pos[,end_pos] => 地址定界符
    :. => 当前行
    :% => 全文, 当前buffer
    :$ => 最后一行
    :c => 修改定界符匹配到的行
    :'<,'> => 高亮选区      

  # 窗口操作
    :Ex => 打开内置的 Netrw 文件树结构
  
    :sp [filename] 水平分割窗口, 如果有文件名则打开文件否则新建窗口
    :vsp [filename] 垂直分割窗口, 如果有文件名则打开文件否则新建窗口
    :new [filename] 水平创建新窗口, 如果有文件名则打开文件否则新建窗口
    :vnew [filename] 垂直创建新窗口, 如果有文件名则打开文件否则新建窗口
    :close|quit 关闭当前活动窗口
    :qa[ll] 关闭所有窗口
    :on[ly] 关闭其他窗口,仅保留当前窗口
    :exit 退出shell
    :!command 执行shell命令
    
    :resize +N 增加窗口多行高度
    :resize -N 减少窗口多行高度
    :resize N 调整窗口指定高度

    " 键盘快捷键切换光标窗口
    noremap <C-h> <C-w><C-h>
    noremap <C-j> <C-w><C-j>
    noremap <C-k> <C-w><C-k>
    noremap <C-l> <C-w><C-l>
    
    H => 光标定位到当前窗口的顶部第一个非空字符处
    L => 光标定位到当前窗口的底部第一个非空字符处

  # 文件操作
    vi fileName => 打开文件
    vi +n filename => 打开文件, 并将光标置于第n行首 
    vi + filename => 打开文件, 并将光标置于最后一行首 
    vi +/pattern filename => 打开文件,并将光标置于第一个与 pattern 匹配的串处 
    vi -o => 水平分割窗口打开多个文件
    vi -O => 垂直分割窗口打开多个文件 
    vi -p => 以标签方式打开多个文件
    vi -M => 以只读模式打开文件

    :w => 保存修改, 如果有文件名则另存为指定文件
    :q! => 强制退出并忽略所有更改
    :e! => 放弃所有修改,并打开原来文件
    :r[ead] fileName => 读取指定文件并添加到当前光标所在处
    :e  filename => 打开新文件
    :!shell 切换到shell命令执行,此时vim在后台运行, exit => 退出 shell 切换回 vim
    :args => 显示使用vi命令打开的文件列表

    # 多文件(使用 vi 命令或者加 -p 参数打开多个文件)
      :prev => 切换上一个文件
      :next => 切换下一个文件
      :first => 切换第一个文件
      :last => 切换最后一个文件
      :n => 切换到下一个文件
      :N => 切换到上一个文件
    # 标签操作(-p 参数打开)
      :tabe => 在新标签页中打开文件
      :tabs => 列出所有的标签页
      :tabn => 切换到下一个标签, 以 -p 方式打开的多个文件
      :tabp => 切换到上一个标签, 以 -p 方式打开的多个文件
      {n}gt => 切换到第 n 个标签页
      :tabc[lose] => 关闭当前的标签页
      :tabo[nly] => 关闭其他的标签页
      :tabm[ove] n => 移动当前标签页到 n 的位置
      :tab split => 将缓冲区的内容在新标签页中打开

    # 缓冲区
      :buffers|ls => 列出缓冲区的文件列表
      :bnext|bn => 切换下一个文件
      :bprev|bp|bN => 切换上一个文件
      :bfirst => 切换到第一个文件
      :blast => 切换到最后一个文件
      :b{n} => 切换到指定文件
      :badd [file] => 添加文件到缓冲区中
      :{num},{num} bd | bd[elete]/bd N1 N2 N3 => 删除缓冲区指定编号区间的文件
      :bd! => 强制删除文件并退出

      :enew =>  当前窗口中新创建一个缓冲区
      :[range] bufdo[!] {cmd} =>  在每个缓冲区中执行命令, 如果指定区间范围, 则命令作用于区间范围内, 作用同 tabdo, windo
      :saveas =>  另存为
      :update =>  更新保存文件, 和 write 的区别是只有文件有变动时才会有保存提示, write 每次保存都会有提示

      :[range] norm[!] {command}  =>  执行普通模式的命令

  # 临时配置
    :syntax on => 开启语法高亮
    :set nu/nonu => 临时显示/隐藏行号
    :set tabstop=4 => 设置 Tab 键宽度
    :set hlsearch => 临时显示搜索时高亮
    :set incsearch/noincsearch => 临时显示/隐藏高亮匹配
  # 正则表达式
    /string => 正则[向后]匹配内容
    ?string => 正则[向前]匹配内容
    :[range] s/old/new/[flags] => 把old指定的字符串替换成new指定的字符串,old可以是正则表达式
          => [range]
            . => 当前行
            1,$ => 从第一行到最后一行
            %   => 全局匹配
          => [flags] 
            g => 对指定范围内的所有匹配项进行替换
            c => 再替换前请求用户确认
            e => 忽略执行过程的错误
            d => 删除操作
    :noh => 取消 /{pattern} 搜索结果的高亮
    /\<pattern\> => 精确匹配 pattern 内容
    
  # 插入模式
    i => 在当前位置前插入
    a => 在当前位置后插入
    I => 在当前行首插入
    A => 在当前行尾插入
    o => 在当前行之后插入一行
    O => 在当前行之前插入一行
    {n}i|I|a|A|o|O{s} -> esc => 重复执行n次命令插入内容s
    # 改写插入
      x => 光标所在处, 删除单个字符
      X => 光标所在处, 往前删除字符
      s => 删除单个字符并立即切换为插入模式
      S => 当前光标所在行, 删除行并立即切换为插入模式
      r => 替换单个字符
      R => 当前光标开始处, 持续替换字符
      c[w|iw|aw|$] => 当前光标开始处, 可配合操作范围指令批量修改字符, 立即切换为插入模式
      C => 当前光标开始处, 修改至行末并立即切换为插入模式

      {n}cw => 改写光标后的n个字
      {n}cb => 改写光标前的n个字
      {n}cl => 改写光标后的n个字符
      {n}ch => 改写光标前的n个字符
      {n}cc => 改写当前n行
      {n}cj|k => 改写下(上)侧的n行
      
  # 命令模式
    # 文本对象
      文本对象就是符合某一标准的在某两个界定符内的一串文本,比如一个单词,一个句子,一个字符串等。文本对象有二个优点,一是无论光标处于该文本对象的哪个字符中,你可以对整个文本对象进行操作；二是有些情况下你想要进行的操作正好就是一个文本对象的全部内容
      文本对象命令只能在可视模式或操作符后使用。这些命令或以 "a" 打头,代表选择一个 ("a"n) 包含空白的对象；或以 "i" 带头,代表选择内含 ("i"nner) 对象: 它们不包含空白。另外,空白本身也是内含对象。这样,"内含" 对象总比 "一个" 对象选择较少的文本

      操作＋对象范围＋文本对象界定符
      单词和句子的界定符用 w 和 s 来表示,其它的用两个界定符中的任何一个都可以表示。如 daw 表示删除一个单词,yis 表示复制一个句子。yi(表示复制一个括号中的内容。

        ① 操作有三种：v、y、d,分别为,选中、复制、删除；
        ② 文本对象共有两个范围,一是a,其实它就是英语单词a,表示一个文件对象,对该文本对象的操作会包括文件对象的界定符,如双引号字符串的双引号,括号,尖括号等。第二个是i,是英语单词inner的缩写,所以这表示操作范围在一个对象之内,不包括界定符
      a      => around
      i      => inner

      a)||ab => 包含圆括号的内容, 命令示例: vabc[d] 字符可视模式, 修改[删除]包含圆括号的内容, c2aw
      i)||ib => 不 包含圆括号的内容, 命令示例: vibc[d] 字符可视模式, 修改[删除]不包含圆括号的内容
      a}||aB => 包含花括号的内容, 命令示例: vaBc[d] 字符可视模式, 修改[删除]包含花括号的内容
      i}||iB => 不 包含花括号的内容, 命令示例: viBc[d] 字符可视模式, 修改[删除]不包含花括号的内容
      a]|[   => 包含方括号的内容,
      i]|[   => 不 包含方括号的内容,
      a"|'|` => 包含引号的内容,
      i"|'|` => 不 包含引号的内容,
      a>|<   => 包含 < 和 > 的内容,
      i>|<   => 不 包含 < 和 > 的内容,

      at     => 包含XML标签的内容, 命令示例: vatc[d] 字符可视模式, 修改[删除]包含XML标签的内容, <aaa>hello</aaa> 包含 <aaa>...</aaa>
      it     => 不包含XML标签的内容, 命令示例: vitc[d] 字符可视模式, 修改[删除]不包含XML标签的内容 <aaa>hello</aaa> 包含 hello
      aw => 一个词(包含在周围的空格), 命令示例: c2aw 修改两个词
      iw => 一个词(不包括周围的空格)
      as => 一句(包含周围的空格)
      is => 一句(不包括周围的空格)
      ap => 一段(包含在周围的空格)
      ip => 一段(不包含周围的空格)
      [d|c|r|y][i|a][b|B|[|"|'|<|w|s|p|t]
    # 查找
      f{s} => 查找下一个s内容
      F(s) => 查找上一个s内容
      ; => 重复执行 t/T/f/F 命令的正向查找
      , => 重复执行 t/T/f/F 命令的反向查找
    # 移动
      h => 向左移动光标
      j => 向下移动光标
      k => 向上移动光标
      l => 向右移动光标
      w => 向右移动一个字, 光标定位在字的首字符
      e => 向下跳到下一个字尾, 
      b => 向左移动一个字, 光标定位在字的首字符
      B => 向左移动一个字,长跳

      0 => 光标移动到行首,忽略缩进
      ^ => 光标移动到行首,第一个字符跳过缩进
      $ => 光标移动到行尾

      gg => 光标移动到页首, 文本第一行
      G => 光标移动到页尾, 文本最后一行

      {n}gg/G/:n => 跳转到指定行首, n 为数字

      :1,10 m 20 => 将第1-10行移动到第20行之后

      ( => 向后移动一个句子,光标定位在句子开始
      ) => 向前移动一个句子,光标定位在句子开始
      { => 向后移动一个段落,光标定位在段落开始
      } => 向前移动一个段落,光标定位在段落开始
      H => 将光标定位到屏幕顶部一行的最左端
      M => 将光标定位到屏幕中间一行
      L => 将光标定位到屏幕的底部一行

      >> => 当前行向右缩进
      << => 当前行向左缩进
      
      % => 移动匹配(,{,[的范围符

      ctrl + f => 向下翻页
      ctrl + b => 向上翻页
      ctrl + d => 向下翻半页
      ctrl + u => 向上翻半页
      ctrl + o => 光标回到上一个光标位置
      ctrl + i => 光标回到下一个光标位置
    # 删除
      # 删除字符
        {n}x|dl => 剪切光标后的n个字符,相当于d{n}l
        {n}X|dh => 剪切光标前的n个字符,相当于d{n}h
      # 删除字
        {n}dw => 从光标所在位置开始, 删除到字的末尾(包含光标所在位置的字符),n 为要个数, 
        {n}dh, {n}dl
        {n}db => 删除光标所在位置前面的n个字(不包含光标所在位置的字符)
      # 删除行
        D => 删除当前行内容(内容不上移, 清空行)

        dd => 删除光标所在行
        {n}dd => 删除从光标开始的 n 行, n 为数字

        dG => 删除全部
        d0 => 从光标开始, 删除到行首的所有字符(不包含光标所在字符)
        d^ => 删除光标前面知道行首的字符, 不包含行首的空格
        d$ => 删除从光标开始知道行尾的字符, 不包含行尾的空格

        :1,$ d => 删除所有行(空格可有可无)
        :0 d => 删除第一行(空格可有可无)
        :$ d => 删除最后一行(空格可有可无)
        :1,.-1 d => 删除当前行之前的所有行(空格可有可无)
        :.+1,$ d => 删除当前行之后的所有行(空格可有可无)
        
        d( => 从句首删除
        d) => 删除到句尾
        d{ => 从段首删除
        d} => 删除到段尾
    # 复制行 yank
      yy => 复制光标所在的行
      {n}yy => 复制从光标开始的n行, n 为数字
      y^ => 复制当前到行头的内容
      y$ => 复制当前到行尾的内容
      yw => 复制一个word(nyw或者ynw,复制n个word,n为数字)
      yG => 复制至档尾(nyG或者ynG,复制到第n行,例如1yG或者y1G,复制到档尾)
      {n}yh,{n}yl
      :1,10 y => 复制1到10行的内容(空格可有可无)
      :1,10 co 20 => 将1-10行复制到第20行之后
    # 粘贴 put
      p(lower) => 如果是v(lower)命令, 则在当前字符的位置后面粘贴, 因为游标是在具体字符的位置上,所以实际是在该字符的后面
      p(lower) => 如果是V(upper)命令, 则在当前行的下一行粘贴行
      P(upper) => 如果是v(lower)命令, 则在当前字符的位置前面粘贴, 因为游标是在具体字符的位置上,所以实际是在该字符的前面(可以看成光标位置)
      P(upper) => 如果是V(upper)命令, 则在当前行的上一行粘贴行

      {n}p => 重复粘贴n次

    # 合并行
      {n}J => 向下合并多行, n 为数字

    # 撤销
      u(lower) => 撤销（Undo）
      U(upper) => 撤销对整行的操作
    # 反转
      {n}~ => 反转光标所在n个字符的大小写, (配合 v 可视模式, 批量转换大小写)
      gu{w|b} => 转为小写
      gU{w|b} => 转为大写
      guu => 将当前光标所在字符转为小写
      gUU => 将当前光标所在字符转为大写

    # 代码折叠
     :set foldmethod=indent 开启智能缩进
     zc 收起缩进
     zC 递归收起多级缩进
     zo 展开缩进
     zO 递归展开多级缩进
     za 切换缩进
     zA 递归切换多级缩进
     zR 展开所有缩进
     zM 收起所有缩进

  # 可视模式
    v(lower) => 进入字符可视模式,移动光标选择文本块内容;
    V(upper) => 进入行可视模式,移动光标选择多行;
    ctrl + v => 区块选择(windows git-cmd)
    ctrl + shift + v => 区块选择(ubuntu 20.04 vi)
    
  # 替换模式
    R => 持续替换字符并立即切换为插入模式

map 映射 map、nmap、imap、vmap、vnoremap、nunmap、nmapclear
  nore: 表示非递归
  n: 表示在普通模式下生效
  v: 表示在可视模式下生效
  i: 表示在插入模式下生效
  c: 表示在命令行模式下生效.(command的意思)
  un: 后面跟按键组合,表示删除这个映射
  clear: 表示清除相关模式下的所有映射


g 全局环境变量
l 局部环境变量
b 当前缓冲区
w 当前窗口
t 当前标签页
s vim脚本文件中的局部文件作用域
a 函数的参数
