9、进程与子进程
  9.1、进程
    1、属性:
      1、execPath:运行应用程序的可执行文件的绝对路径,String
      2、version:值为NodeJs的版本号,String
      3、versions:值为Nodejs及其依赖的版本号,Object
      4、platform:值为当前运行NodeJs的平台,String
      5、stdin:Object,值为一个可用于读入标准输入流的对象,默认情况下,为暂停状态,process.stdin.resume(),
      6、stdout:Object,值为一个可用于写入标准输出流的对象,
      7、stderr:Object,值为一个可用于写入标准错误输出流的对象,
        stdout对象和stderr对象的写数据操作是一个阻塞性操作,当使用其他读入数据流的对象的pipe方法,
          并且将该对象作为目标对象的时候,该对象的写数据才是非阻塞型操作
      8、argv:Array,包含了运行NodeJs应用程序时的所有命令参数,第一个为node,第二个为脚本文件名
      9、env:Object,包含了运行NodeJs应用程序时的操作系统环境信息,
      10、config:Object,包含了用于编译当前Node应用程序的可执行文件的配置选项的javascript描述
      11、pid:Number,运行当前NodeJs应用程序的进程的PID,
      12、title:String,运行当前NodeJs应用程序的命令行窗口的标题,
      13、arch:String,运行NodeJs应用程序的处理器架构,'x64',
      process.stdin.resume();
      process.stdin.on("data",function(data){
        process.stdout.write("进程接收到数据:"+data);
      });
    2、方法:
      1、process.memoryUsage();Object,获取NodeJs应用程序的进程的内存使用量
        // { rss: 21995520, heapTotal: 11571200, heapUsed: 5671704 }
        1、rss:Number,值为NodeJs应用程序的进程的内存消耗量,单位为字节
        2、heapTotal:Number,值为V8所分配的内存量,单位为字节
        3、heapUsed:Number,值为V8内存的消耗量,单位为字节
      2、process.nextTick(callback);将一个函数推迟到下一个同步方法执行完毕时或者异步方法的回调函数开始执行时调用,可以实现递归遍历
        function foo(){
          console.log("foo");
        }
        process.nextTick(foo);// == setTimeout(foo,0);
        console.log("bar");
        //实现递归遍历
        process.nextTick(function foo(){
          /*....*/
          process.nextTick(foo);
        })
        1、process.maxTickDepth:默认值为1000,超过应用程序则提示采用setImmediate方法
      3、process.abort();向NodeJs应用程序的进程发出SIGABRT信号,使进程异常终止,同时产生一个核心文件
      4、process.chdir(directory);用于修改NodeJs应用程序中使用的当前工作目录,如果指定路径不存在,则抛出异常
      5、process.cwd();返回当前工作目录
        console.log("当前工作目录:"+process.cwd());
        process.chdir("../");
        console.log("当前工作目录:"+process.cwd());
      6、process.exit([code]);退出Nodejs应用程序的进程,默认值为0
      7、process.getgid();返回NodeJs应用程序的进程的组ID,该方法在winOS中无效
      8、process.setgid(id);设置NodeJs应用程序的进程的组ID,该方法在winOS中无效
      9、process.getuid();返回NodeJs应用程序的进程的用户ID,该方法在winOS中无效
      10、process.setuid(id);设置NodeJs应用程序的进程的用户ID,该方法在winOS中无效
      11、process.getgroups();返回运行NodeJs应用程序的进程的所有附属组ID构成的数组,在winOS中无效
      12、process.setgroups(groups);设置运行NodeJs应用程序的进程的所有附属组ID,在winOS中无效
      13、process.initgroups(user,extra_group);使用一个指定用户的所有归属组来初始化/etc/group组列表,在winOS中无效
      14、process.kill(pid,[signal]);向一个进程发送信号,不使用signal参数时表示中止该进程
      15、process.unmask([mask]);读取或修改运行NodeJs应用程序的进程的文件权限掩码,子进程继承父进程的文件权限掩码
      16、process.uptime();Number,返回NodeJs应用程序的当前运行时间,单位为秒
      17、process.hrtime();Array,用于测试一个代码段的运行时间,第一个值为妙,第二个值为纳秒
    3、事件:
      1、exit:当运行NodeJs应用程序的进程退出时触发,function(){}
      2、uncaughtException:当运行NodeJs应用程序中抛出一个未被捕捉的异常时触发,function(err){}
      3、各种信号事件
  9.2、创建多进程应用程序:child_process模块:在多个子进程之间可以共享内存空间,可以通过子进程之间的互相通信实现信息的交换
    1、使用spawn开启子进程
      1、方法
        1、child_process.spawn(command,[args],[options]);//该方法返回一个隐士创建的代表子进程的ChildProcess对象
          1、command:String,指定需要运行的命令.
          2、args:Array,运行该命令时需要指定的参数,默认为一个空数组
          3、options:Object,开启子进程时使用的选项
            1、cwd:String,指定子进程的当前工作目录,可以使用相对路径或者绝对路径指定该目录
            2、stdio:String/Array(3),设置子进程的标准输入/输出,该三个元素分别指定子进程的标准输入文件描述符、标准输出文件描述符、标准错误输出文件描述符
              1、pipe:用于在子进程和父进程之间创建一个管道,
                父进程可以通过ChildProcess对象的stdio[0]访问子进程的标准输入,
                  stdiop[1]访问子进程的标准输出,stdio[2]访问子进程的标准错误输出
              2、ipc:用于在父进程和子进程之间创建一个专用于传递消息或文件描述符的IPC通道,
                  一个子进程最多拥有一个IPC通道文件描述符,设置此值同时使该子进程的send方法可用,
                  在该文件描述符中写入JSON格式的消息,将会触发该子进程对象的message事件
              3、ignore:用于指定不用为子进程设置文件描述符,如果文件描述符被忽略,NodeJs会把子进程的文件描述符定义为/dev/null(重定向到空设备文件)
              4、Stream对象:用于指定子进程于父进程共享一个终端设备、文件、端口或管道,数据流的底层文件描述符将会在子进程中被复制
              5、正整数值:用于指定父进程中被打开的文件描述符,该文件描述符在子进程中被共享
              6、null/undefined:使用默认值
            3、customFds:Array,指定子进程的标准输入/输出指定文件描述符,该属性不推荐使用
            4、env:Object,用于以"键/值"方式指定子进程的环境变量,不指定时子进程无可用环境变量
            5、detached:Boolean,default:false,指定该进程为进程组的领头进程,当父进程不存在时,该进程仍然可以存在
            6、uid:Number,用于设置子进程的用户id,非winOS有效
            7、gid:Number,设置子进程的组id,非winOS有效
          var spawn = require("child_process").spawn;
          spawn('prg',[],{stdio:['pipe','pipe',process.stderr]});//父进程与子进程之间只共享标准错误输出
            1、stdio属性值:
              1、ignore:其作用等同于将stdio的属性值设置为'["ignore","ignore","ignore"]'
              2、pipe:其作用等同于将stdio的属性值设置为'["pipe","pipe","pipe"]'
              3、inherit:其作用等同于将stdio的属性值设置为'["process.stdio","process.stdout","process.stderr"]'或者'[0,1,2]'
              var chdPro = require("child_process").spawn("prg",[],{stdio:"inherit"});
              //父进程与子进程之间共享标准输入输出
        2、childProcess.kill([signal]);在父进程中使用子进程的kill方法向子进程发送消息,default:SIGTERM(用于强制关闭进程)
        3、childProcess.unref();使用子进程的退出方法使父进程退出,
      2、事件:
        1、close:当子进程对象关闭时触发,function(code,signal){}
          1、code:Number,代表子进程的退出代码,正常退出为0,异常退出时为null,
          2、signal:String,参数值代表在父进程中关闭子进程时,发送给子进程的信号名称,其他场合中,该值为null
        2、exit:当子进程退出时触发,function(code,signal){}
          1、回调函数的参数的用法和close事件的一致,
          2、和close事件的区别:当子进程退出时,子进程的输入/输出可能并未终止,当exit事件触发时,不一定触发close事件
        3、error:当发生错误时触发,function(err){}
    var sp1 = cp.spawn('node',['test1.js','one','two','three','four'],{cwd:'./test',stdio:['ipc','pipe','ignore']});
    var sp2 = cp.spawn('node',['test2.js'],{stdio:'pipe',cwd:'./test'});
    sp1.stdout.on('data',function(data){
      console.log('子进程标准输出:'+data);
      sp2.stdin.write(data);
      sp1.kill();
    });
    2、使用fork开启子进程:开启一个专用于运行NodeJs中某个模块文件的子进程
      1、方法:
        1、child_process.fork(modulePath,[args],[options]);//该方法返回一个隐士创建的代表子进程的ChildProcess对象
          1、modulePath:String,指定需要运行NodeJs模块文件路径及文件名
          2、args:Array,运行该模块文件时需要使用的参数,默认为一个空数组
          3、options:Object,开启子进程时使用的选项
            1、cwd:String,指定子进程的当前工作目录,可以使用相对路径或者绝对路径来指定该目录
            2、env:Object,用于以"键/值"方式指定子进程的环境变量,不指定时子进程无可用环境变量
            3、encoding:String,指定标准输出及标准错误输出数据的编码格式,default:'utf8'
            4、silent:Boolean,default:false,为true时,子进程对象与父进程对象不共享标准输入/输出
        2、process.exit();当子进程的输入/输出操作全部执行完毕后,不会自动退出,需要使用该方法显式退出
        3、ChilProcess.send(message,[sendHandle]);//在父进程中向子进程发送消息
        4、process.send(message,[sendHandle]);//在父进程中向主进程发送消息
          1、message:String,指定需要发送的消息
          2、sendHandle:Function/Socket Object/Server Object,
      2、事件
        1、message:当子进程接收到消息时触发,function(message,setHandle){};
          1、message:接收到的消息
          2、setHandle:当回调函数的第二个参数指定为一个对象时,该参数代表接收到的对象
        2、error:当消息发送失败时触发,function(err){}
    3、使用exec开启子进程:开启一个用于运行某个命令的子进程并缓存子进程的输出结果
      1、方法:
        1、child_process.exec(command,[options],[callback]);//该方法返回一个隐士创建的代表子进程的ChildProcess对象
          1、command:String,指定需要运行的命令,
          2、options:Object,开启子进程时使用的选项,
            1、cwd:String,指定当前子进程的工作目录,可以使用相对路径或者绝对路径指定该目录,default:null
            2、env:Object,用于以"键/值"方式指定子进程的环境变量,不指定时子进程无可用环境变量
            3、encoding:String,指定标准输出及标准错误输出数据的编码格式,default:'utf8'
            4、timeout:Number,指定子进程的超时时间,单位毫秒,当超时时,NodeJs使用killSignal属性所指定的信号强制关闭该子进程,default:0
            5、maxbuffer:Number,指定用于缓存标准输出数据及标准错误输出数据的缓存区的最大长度,如果长度超出,则子进程被强制关闭,default:200*1024
            6、killSignal:String,指定关闭子进程的信号,default:SIGTERM
            7、callBack:function(err,stdout,stderr){}
              1、err:子进程异常终止时触发,
              2、stdout:Object,缓存了子进程标准输出数据的缓存区对象,
              3、stderr:Object,缓存了子进程标准错误输出数据的缓存区对象,
          3、与spawn方法的区别:
            1、spawn方法可以在父进程中实时接收子进程中输出的标准输出流数据或标准错误输出流数据,是一个异步方法
            2、exec方法在父进程中必须等待子进程中的标准输出流数据或标准错误输出流数据全部缓存完毕后才能接收这些数据,是一个同步方法
    4、使用execFile方法开启子进程:开启一个专用于运行某个可执行文件的子进程
      1、方法:
        1、child_process.execFile(file,[args],[options],[callback]);//用法和exec的用法一致
          1、file:String,指定需要运行的可执行文件路径及文件名,
          2、args:Array:保存所有运行该文件是所需要的参数,默认为一个空数组
          3、options:Object,开启子进程时使用的选项,
  9.3、在多个子进程中运行NodeJs应用程序:cluster模块
    1、使用fork方法创建worker对象
      1、方法:
        1、cluster.fork([env]);//该方法返回一个隐式创建的worker对象,代表fork方法开启的子进程运行的NodeJs应用程序的实例对象
          1、env:Object,用于以"键/值"方式指定子进程的环境变量,不指定时子进程无可用环境变量
        2、cluster.listen();应用程序调用服务器的方法对指定端口及地址进行监听
        3、cluster.setupMaster([settings]);修改子进程中运行的NodeJs应用程序的其他默认行为
          1、exec:String,属性值为子进程中运行模块文件的完整路径及文件名
          2、args:Array,运行子进程中的NodeJs应用程序时需要使用的参数
          3、silent:Boolean,default:false,设置为true,子进程对象和父进程对象不共享标准输入/输出
      2、属性:
        1、cluster.isMaster;Boolean,如果NodeJs应用程序的实例对象运行在主进程中,则isMaster为true
        2、cluster.isWorker;Boolean,如果NodeJs应用程序的实例对象运行在子进程中,则isWorker为true
        3、cluster.workers;获取所有子进程中运行的worker对象
      3、事件:
        1、fork:当使用fork方法开启子进程时触发;function(worker){}
        2、online:当使用fork方法开启子进程时,子进程会主动向主进程发送一个反馈信息时触发,function(worker){}
        3、listening:服务器对指定端口及地址监听时触发,function(worker,address){}
          1、worker:fork方法开启子进程的worker对象
          2、address:Object,
            1、address:String,子进程中的服务器监听的地址
            2、port:Number,子进程中服务器监听的端口号
            3、addressType:子进程中服务器监听的地址类型,4:IPv4,6:IPv6
    2、worker对象的方法和事件
      1、方法:
        1、worker.send(message,[sendHandle]);在主进程中向子进程发送消息
        2、worker.kill([signal]);强制关闭该子进程,别名:destroy,worker.destroy();
        3、worker.disconnect();使该子进程不再接收外部链接
      2、事件:
        1、message:当子进程接收到消息时触发,function(message,setHandle){}
        2、exit:当子进程退出时触发,function(code,signal){}
          1、code:0为正常,异常为null,
          2、signal:在主进程中关闭子进程时向子进程发送的信号的名称,
          3、disconnect:当子进程与父进程的IPC通道关闭时触发,function(){}
          4、data:
  9.4、小结:
    1、child_process模块:用于实现在NodeJs应用程序中开启多个子进程并在各子进程中运行各种不同的命令或执行NodeJs模块文件、
        可执行文件的处理
    2、cluster模块:用于实现NodeJs应用程序中开启多个子进程,并在每个子进程中运行一个NodeJs应用程序副本的处理


