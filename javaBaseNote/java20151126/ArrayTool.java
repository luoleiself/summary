/*
静态的使用时机：因为静态修饰的内容有成员变量和成员方法;
				1,当对象中出现共享数据时，该数据被静态所修饰;对象的特有数据定义为非静态存在于堆内存中。
				2,当功能内部没有访问到非静态数据(对象的特有数据),该功能可以定义成静态的。

静态的应用：
				每一个应用程序都有共性的功能，可以将这些功能进行抽取，独立封装，以便复用。

静态的注意：	  虽然可以使用建立对象来使用这些方法，对数组进行操作。
				1,对象时用于封装数据的，但是，建立的对象并没有封装特有数据。
				2,自定义类中没有一个方法用到对象中的特有数据。
			
				可以直接将自定义类中的方法都定义为静态之后，直接通过类名调用即可。

构造函数私有化：将方法定义都静态后，可以方便使用，但是该类还是可以被其他程序建立对象。
				为了更为严谨，强制让该类不能建立对象，可以通过构造函数私有化完成。
		  格式：  
				  private 类名() {}

注意：此方法只提供给数组排序使用，没有必要展现给所有人知道，可以将方法私有化，只展现运行结果就可以了。

*/
class ArrayTool
{
	//对构造函数进行私有化;不让用户进行对象的建立。
	private ArrayTool()
	{

	}
	/*
	构造函数代码块：
	
	省略方法名
	{
		执行语句;
	}
	
	构造函数代码块优先于构造函数执行对象初始化;
	*/
	//获取数组中的最大值;
	//使用static变为静态方法之后不用建立对象可以用直接使用类名调用方法:类名.成员();
	//此方法只提供给数组排序使用，没有必要展现给所有人知道，可以将方法私有化，只展现运行结果就可以了。
	private static int getMax(int [] arr)
		int max = 0;
		for (int x=1;x<arr.length;x++)
		{
			if (arr[x]>arr[max])
			{
				max = x;
			}
		}
		return arr[max];
	}
	//获取数组中的最小值;
	//使用static变为静态方法之后不用建立对象可以用直接使用类名调用方法:类名.成员();
	//此方法只提供给数组排序使用，没有必要展现给所有人知道，可以将方法私有化，只展现运行结果就可以了。
	private static int getMin(int [] arr)
	{
		int min = 0;
		for (int x=1;x<arr.length;x++)
		{
			if (arr[x]<arr[min])
			{
				min = x;
			}
		}
		return arr[min];
	}
	//对数组中的元素进行选择排序;
	//使用static变为静态方法之后不用建立对象可以用直接使用类名调用方法:类名.成员()
	//此方法只提供给数组排序使用，没有必要展现给所有人知道，可以将方法私有化，只展现运行结果就可以了。
	private static void selectSort(int [] arr)
	{
		//外层循环从数组的角标初始值0开始读取元素，读取最后一个元素的前一个元素和最后一个元素比较，所以是arr.length-1;
		for (int x=0;x<arr.length-1;x++)
		{
			for (int y=x+1;y<arr.length;y++)//内层循环从第二个元素开始也就是第一个元素的角标值+1;避免重复比较；
			{
				if (arr[x]>arr[y])//第一个元素和以后的每一个元素进行比较；
				{
					swap(arr,x,y);//调用数组元素交换方法;
				}
			}
		}
	}
	//对数组中的元素进行冒泡排序;
	//使用static变为静态方法之后不用建立对象可以用直接使用类名调用方法:类名.成员()
	//此方法只提供给数组排序使用，没有必要展现给所有人知道，可以将方法私有化，只展现运行结果就可以了。
	private static void bubbleSort(int [] arr)
	{
		//外层循环的功能和选择排序的功能一致，控制读取元素的位置；
		for (int x=0;x<arr.length-1;x++)
		{
			//arr.length-a-1的功能是控制数组长度，移位到后面的元素不再参与比较；避免重复比较；
			for (int y=0;y<arr.length-x-1;y++)
			{
				if (arr[y]>arr[y+1])//第一个元素和第二个元素进行比较，
				{
					swap(arr,x,y+1);//调用数组元素交换方法;
				}
			}
		}
	}
	//元素交换方法;
	//使用static变为静态方法之后不用建立对象可以用直接使用类名调用方法:类名.成员()
	//此方法只提供给数组排序使用，没有必要展现给所有人知道，可以将方法私有化，只展现运行结果就可以了。
	private static void swap(int [] arr,int a,int b)
	{
		int temp =arr[a];
		arr[a] = arr[b];
		arr[b] = temp;
	}
	//打印输出数组元素方法;
	//使用static变为静态方法之后不用建立对象可以用直接使用类名调用方法:类名.成员()
	//此方法只提供给数组排序使用，没有必要展现给所有人知道，可以将方法私有化，只展现运行结果就可以了。
	private static void printArray(int [] arr)
	{
		System.out.print("[");
		for (int x=0;x<arr.length;x++)
		{
			if(x!=arr.length-1)
			{
				System.out.print(arr[x]+",");
			}
			else
			{
				System.out.print(arr[x]+"]");
			}
		}
	}
}

