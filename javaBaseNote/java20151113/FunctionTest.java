/*
函数的定义格式：
修饰符 返回值类型 函数名（参数类型 形式参数1,参数类型 形式参数2,....）
  {
   执行语句;
   return 返回值;
  }
  
  注释：
  返回值类型：函数运行后的数据类型。
  参数类型：指形式参数的数据类型。
  形式参数：是一个变量，用于储存当函数被调用是传进来的实际参数
  return：返回该函数运算的结果，return语句；后的语句将执行不到，
			如无须返回数据，即void时，则可以省略return语句。
重载的概念：
	在同一个类中，允许存在一个以上的同名函数，只要它们的参数个数或者参数类型不同即可。
	与返回值类型无关，只与参数列表有关。


课后练习一：打印9*9乘法表，尽量使用多种不同方法实现;
课后练习二：打印不规则矩阵，尽量使用多种不同方法实现;
思路：
1，首先分析得出9*9乘法表的效果为	1*1=1 
									1*2=2	2*2=4
2,相乘的两个数的取值范围在1-9之间。

3，此处需要使用到循环（遍历）嵌套语句，需要定义两个变量，外层循环控制行数，内层循环控制每一行的内容。
课后练习二：
1，首先分析不规则矩阵的排列规律。总共有几行几列。
2，使用双重循环语句进行输出。
*/
class  FunctionTest
{	
	public static void main(String[] args) 
	{	
		for (int a=1;a<=9;a++)//以下语句的功能为尖朝上输出打印9*9乘法表;
		{
			for (int b=1;b<=a;b++)
			{
				System.out.print(b+"*"+a+"="+b*a+"\t");//注意print后面不要使用转义字符ln;\t为转义字符tab;
			}
			System.out.println();
		}
		System.out.println("------------------------------------------");

		for (int a=9;a>=1;a--)//以下语句的功能为尖朝下输出打印9*9乘法表;
		{
			for (int b=a;b>=1;b--)//尖朝下，定义内循环初始表达式的值，控制内层循环的变化;
			{
				System.out.print(b+"*"+a+"="+b*a+"\t");//注意print后面不要使用转义字符ln;\t为转义字符tab;
			}
			System.out.println();
		}
		System.out.println("------------------------------------------");
		
		/*
		问题总结：
		1，练习的过程中，在内层循环，条件表达式的书写为b<=9;导致程序输出的时候变成了矩阵形状。
		2，内层循环中的输出语句中括号内部的字符串的使用方法掌握不熟练。
		*/
		
		Function99();
		
	}
	
	//方法二：使用定义函数输出打印;
	public static void Function99()
		{
			for (int c=1;c<=9;c++)//以下语句的功能为尖朝上输出打印9*9乘法表;
			{
				for (int d=1;d<=c;d++)
				{
					System.out.print(d+"*"+c+"="+c*d+"\t");//注意print后面不要使用转义字符ln;\t为转义字符tab;
				}
				System.out.println();
			}
		}
	/*
	问题总结：
	1，定义主函数的括号里面的参数列表的使用掌握不熟练。
	2，定义的函数的变量的作用域不明确。
	*/
	
	/*
	练习总结：
	如何定义个函数呢？
	1，既然函数是一个独立的功能，那么该功能的运算结果是什么先明确。
		因为这是在明确函数的返回值类型。
	2，在明确在定义该功能的过程中是否需要未知的内容参与运算，
		因为是在明确函数的参数列表（参数的类型和参数的个数）。
	
	有返回值类型的函数和无返回值类型的函数的区别：
		有返回值类型的函数一般在函数内部有return返回值，返回值类型为int short long 等等。
		无返回值类型的函数一般返回值类型用void定义，函数内部不需要return返回值。
	
	什么时候用重载？
	1，当定义的功能相同，单参与运算的未知内容不同。
		那么，这时就定义一个函数名称以表示其功能，方便阅读，而通过参数列表的不同来区分多个同名函数。
	*/
	


	/*
	//以下函数功能实现99乘法表函数的重载（函数的调用）。
	public static void Function99()
		{
			Function99(9);
		}
	public static void Function99(int num)
		{
			for (int c=1;c<=num;c++)
			{
				for (int d=1;d<=c;d++)
				{
					//注意print后面不要使用转义字符ln;/t为转义字符tab制表符;
					System.out.print(d+"*"+c+"="+d*c+"\t");
				}
				System.out.println();
			}
		}
	*/
}
