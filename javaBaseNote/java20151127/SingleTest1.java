/*
设计模式:解决某一类问题最行之有效的方法。
java中有23种设计模式：
单例设计模式：解决一个类在内存中只存在一个对象。

想要保证对象唯一：
		1,为了避免其他程序过多建立该类对象，先禁止其他程序建立该类对象。
		2,还为了让其他程序可以访问到该类对象，只好在本类中，自定义一个对象。
		3,为了方便其他程序对自定义对象的访问，可以对外提供一些访问方式。
	
步骤代码实现：
		1,将构造函数私有化。
		2,在类中创建一个本类对象。
		3,提供一个方法可以获取到该对象。

对于事物该怎么描述，还怎么描述。
当需要将该事物的对象保证在内存中唯一时，就将以上的三步加上即可。

这个是先初始化对象
称为：饿汉式
Single类一进内存，就建立了对象，然后将对象的地址值赋给方法区的变量。
class Single
{
	private single()//构造函数私有化，不让其他人对对象进行私有化。
	{

	}
	//方法的调用有两种方法；对象.方法名和类名.方法名。
	//对象已经不能被再次建立，因此调用方法只能在方法为静态时：类名.方法名
	//静态方法只能调用静态成员，因此类中新建对象的变量为静态变量。
	private static Single s = new Single();
	public static Single getInstance()
	{
		return s;
	}
}
*/
//对象是方法被调用时，才初始化，也叫作对象的延迟加载，称为：懒汉式。
//Single类一进内存，对象还没有存在，只有调用了getInstance()方法后，才建立对象。
/*
synchronized 同步块，Java语言的关键字，可用来给对象和方法或者代码块加锁，当它锁定一个方法或者一个代码块的时候，
			同一时刻最多只有一个线程执行这段代码。
			当两个并发线程访问同一个对象object中的这个加锁同步代码块时，一个时间内只能有一个线程得到执行。
			另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。
			然而，当一个线程访问object的一个加锁代码块时，另一个线程仍然可以访问该object中的非加锁代码块。
*/
//懒汉式：
class Single
{
	private static Single s = null;
	private Single()
	{

	}
	public static  Single getInstance()
	{
		if (s==null)
		{
			synchronized(Single.class)//synchronized 同步块，
			{
				if (s==null)
				{
					s = new Single();
				}
			}
			
		}
		return s;
	}
}
