/*
数组概念：同一种类型的数据的集合，其实数组就是一个容器。
		  按使用方式可以分为一维数组，二维数组，多维数组。
数组的定义格式：

元素类型 [] 数组名 = new 元素类型[元素个数或者元素长度];

注意细节：	1,数组占用内存为堆内存，
			2,数组以地址赋值给数组，
			3,初次定义数组的初始化值默认为0，
			4,数组的角标默认值从0开始;
			5,垃圾回收机制，堆内存中丢弃的垃圾系统自动不定时的自动清理，栈内存中的不会。
			6,常量null只有引用类型才能使用，例如，类，接口，数组。
			7,数组在运作时才会在堆内存中开辟存储空间;
			8,Boolean型数组的默认值为false;

数组的属性：.length;自动获取数组的元素个数;
格式：		数组名称.length = 数组长度;

编译问题：
			1,ArrayInderOutOfBoundException;角标越界，角标值不存在;
			2,NullPointerException;空指针异常;

数组的定义格式：
		int [] arr = new int [];
		int arr [] = new int [];
		
		int [] arr = new int [3];
		int [] arr = new int []{1,2,3,4,5,6,7,8,9,};
		int [] arr = {1,2,3,4,5,6,7,8,9,};

课后练习三：对一个数组中的元素进行排序。
思路：
	1,对数组中的元素排序是按照一定的顺序从大到小或者从小到大排列，需要使用for循环语句进行重复功能，
	2,同时需要读取数组中的前两个元素进行比较，将小(大)的元素进行换位到最前面，需要使用if条件语句进行比较。
	3,将两个元素比较之后需要借用第三方临时变量进行存储元素。
	4,可以使用选择排序法和冒泡排序法;
*/

class ArrTest3
{	
	//选择排序法：通过第一遍排序可以确定最值已移动到头角标位置处；
	public static void selectArray(int [] arr)
	{
		//外层循环从数组的角标初始值0开始读取元素，读取最后一个元素的前一个元素和最后一个元素比较，所以是arr.length-1;
		for(int a=0;a<arr.length-1;a++)
		{
			for(int b=a+1;b<arr.length;b++)//内层循环从第二个元素开始也就是第一个元素的角标值+1;避免重复比较；
			{
				if(arr[a]>arr[b])//第一个元素和以后的每一个元素进行比较，借用第三变量进行换位；需要外循环角标值；
				{
					int temp=arr[a];
					arr[a]=arr[b];
					arr[b]=temp;
				}
			}
		}
	}
	
	//冒泡排序法：通过第一遍排序可以确定最值已移动到尾角标位置处；
	public static void bubbleArray(int [] arr)
	{
		//外层循环的功能和选择排序的功能一致，控制读取元素的位置；
		for (int a=0;a<arr.length-1;a++)
		{
			//arr.length-a-1的功能是控制数组长度，移位到后面的元素不再参与比较；避免重复比较；
			for (int b=0;b<arr.length-a-1;b++)
			{
				if (arr[b]>arr[b+1])//第一个元素和第二个元素进行比较，借用第三变量进行换位，
				{
					int temp=arr[b];
					arr[b]  =arr[b+1];
					arr[b+1]=temp;
				}
			}
		}
	}
	
	//数组打印方法：
	public static void printArray(int [] arr)
	{
		System.out.print("arr[]=arr{");
		for (int x=0;x<arr.length;x++)//使用arr.length可以获取当前数组的元素个数；
		{
			if (x!=arr.length-1)//判断数组的角标是否为最后一个，如果不是最后一个，则输出带逗号的，否则反之；
			{
				System.out.print(arr[x]+",");
			}
			else
			{
				System.out.print(arr[x]);
			}
		}
		System.out.print("}");
		System.out.println();
	}
	public static void main(String[] args)
	{
		int [] arr ={18,2,23,45,72,23,46};
		//选择排序前：
		printArray(arr);
		//选择排序：
		selectArray(arr);
		//选择排序后：
		printArray(arr);
		//冒泡排序：
		//bubbleArray(arr);
	}
	/*
	总结：
		1,对一类数据(数组)进行取最值，排序等操作时，首要考虑的是头角标和尾角标对应的元素的读取后的处理问题，
		  避免读取后的元素的重复比较，增加方法的重复计算。
		2,以后要加强对方法(返回值类型,参数列表)的定义，调用的练习；
	
	选择排序和冒泡排序：
		1,选择排序方法，是将数组中的第一个元素和它以后的每一个元素进行比较，以此类推，第一遍排序之后，最值换位到首角标处。
		2,冒泡排序方法，是将数组中的第一个元素和它后面的第二个元素进行比较，以此类推，第一遍排序之后，最值换位到尾角标处。
		3,这两种排序方法中，需要重点掌握的是使用嵌套循环语句时，初始值表达式和条件表达式的取值范围，避免方法的重复计算。
	*/	
	
}
