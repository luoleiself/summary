github学习网址：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
								http://www.bootcss.com/p/git-guide/
本地协议：
		$ git clone /opt/git/project.git 							//克隆速度快。
		$ git clone file:///opt/git/project.git 			//克隆干净的版本库仓库
	优点：设置简单，使用现有的文件权限和网络访问权限。
	缺点：配置复杂，访问位置有局限性。
https协议：
	$ git clone https://example.com/gitproject.git
	优点：安全性高，访问位置没有局限性，
	缺点：配置复杂。
ssh协议：
	$ git clone ssh://user@server/project.git
	$ git clone user@server:project.git
	优点：配置简单，安全性高，传输速度快。
	缺点：不能实现匿名访问，只要读取数据，都要进行验证。
git协议：
	优点：传输速度极快，省去了ssh的验证机制，
	缺点：缺乏授权机制，配置复杂，需要开放防火墙的端口9418.
	git daemon --reuseaddr --base-path=/opt/git/ /opt/git/
	--reuseaddr 允许服务器在无需等待旧连接超时的情况下重启，
	--base-path 选项允许用户在未完全指定路径的条件下克隆项目，结尾的路径将告诉 Git 守护进程从何处寻找仓库来导出。
一、git简介：
	Git是目前世界上最先进的分布式版本控制系统（没有之一）。
	Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。
	集中式vs分布式：
二、安装：
	1、Debian或Ubuntu Linux安装：
		命令：github		//判断当前系统是否安装了github
		命令：sudo apt-get install git		//安装github
		命令：git  --version	//获取当前github的版本号
	2、其他Linux版本，可以直接通过源码安装。
		先从Git官网下载源码，然后解压，
		依次输入：./config，make，sudo make install这几个命令安装就好了。
	3、Mac OS X 上安装Git：
		方法一：
			首先安装homebrew，然后通过homebrew安装Git，具体方法参考homebrew文档：http://brew.sh/
		方法二：
			从AppStore安装Xcode，
			选择菜单“Xcode”->“Preferences”，
			在弹出窗口中找到“Downloads”，
			选择“Command Line Tools”，点“Install”就可以完成安装了。
	4、Windows上安装Git：
		msysgit：模拟环境和Git打包后。网址：https://git-for-windows.github.io，
		然后按默认选项安装即可。
		再开始菜单找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！
		安装完成后需要设置用户名和邮箱:因为git是分布式版本控制系统，每个机器必须有自己的名字和邮箱
		命令：git config --global user.name "Your Name"
		命令：git config --global user.email "email@example.com"
三、创建版本库(Repository)：
	版本库：仓库(repository),所有文件存放的一个目录被git管理起来，每个文件的增删改查，git都能跟踪，
		git会自动为我们创建一个master分支。git commit 就是往master分支上提交更改。
	第一步：创建仓库
		命令：mkdir learngit	//创建一个learngit的版本库
		命令：cd  learngit	//进入learngit的目录下
		命令：pwd 		//显示当前目录，在Mac上，一个位于/user/michael/learngit
		注意：如果使用windows系统，尽量不要使用中文字符的目录名称。
	第二步：初始化仓库
		命令：git  init		//初始化目录未git可以管理的仓库。
		注意：如果仓库创建成功，当前目录下多出一个.git的目录，此目录是git来管理版本库的，不要轻易改动改目录下的设置，如果没有看到.git目录，因为该目录默认为隐藏状态，
		命令：ls  -ah 		//显示所有文件，包括隐藏文件
	第三步：向仓库中添加文件
		命令：git add readme.txt	//把文件添加到仓库中的暂存区，可以反复多次使用，添加多个文件；
		命令：git commit -m "wrote a readme file"	//把文件提交到仓库中
		注释：-m后面输入的是本次提交的说明,可以输入任意内容，最好为有意义的提示性信息。
		技巧：因为commit可以一次提交很多文件，所以你可以多次add不同的文件，
四、时光穿梭机：
	命令：git status		//获取当前仓库的状态。
	命令：git diff readme.txt	//查看上次修改的文件内容。
	1、版本回退：
		1、命令：git log		//显示从最近到最远的提交的文件记录日志，
		   补充：如果提交的记录日志显示特别多，可以加上--pretty=oneline参数，(输出内容前面是commit id(版本号))
		2、命令：git reset --hard HEAD^  //把当前版本回退到上一个版本
		   补充：git中，使用HEAD表示当前版本(最新的commit id),上一个版本就是HEAD^,上上一个版本就是HEAD^^,依次类推，如果有回退版本过多的话，可以使用HEAD~100。
		   示例：git reset --hard HEAD~59
		3、命令：git reset --hard commit id
		   补充：如果返回到最新的版本时，需要找到最新的版本的commit id，版本号不用全部写完，git自动去查找
		   示例：git reset --hard 3628164
		4、命令：git reflog	//记录每一次的命令，命令历史记录。
	2、工作区(Working Directory)和暂存区(stage):
		1、工作区：电脑中能看到的目录,
		2、暂存区：.git目录中专门新建的一块临时存储区域，git add命令实际就是把要提交的所有修改放到暂存区(stage)，执行git commit就可以一次性把暂存区所有修改提交到分支。
	3、管理修改：
		1、git管理的是对文件的修改，对文件和文件内容的任何一个操作都是一次修改。
		2、如果每次修改不用git add加到暂存区中，那么就不会加入到commit中。
	4、撤销修改：
		1、命令：git checkout -- file(readme.txt)		//把文件在工作区的修改全部撤销；
		2、有两种情况：
			1、readme.txt自修改后还没被放到暂存区中，现在，撤销修改就回到和版本库一模一样的状态。
			2、readme.txt已经添加到暂存区后，又做了修改，现在，撤销修改就回到添加到暂存区后的状态。
			3、参数中的 -- 很重要，如果没有就变成了切换到另一个分支的命令，
		3、总结：
			1、场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
			2、场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
			3、场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
	5、删除文件：
		1、命令：rm file		//删除文件，但是在git reflog历史操作记录中会有记录。
		2、命令：git rm file		//彻底删除文件，包涵版本库中的历史操作记录，并且git commit提交。
		3、命令：git checkout 		//其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
		4、总结：命令git rm用于删除一个文件。
			如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
五、远程仓库：
	1、添加远程库：因为本地的git仓库和远程的github仓库之间的传输是ssh加密的。
		1、创建SSH Key，在用户主目录下，查看是否有.ssh目录，
			如果有，在看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有，则直接下一步，没有则需要创建ssh key.
			1、id_rsa是私钥不能泄漏出去，id_rsa.pub是公钥可以共同使用。
			2、ssh-keygen -t rsa -c "youremail@example.com"
		2、登陆github，打开“Account settings”,“SSH Keys”页面；
			1、点击"Add SSH Key",添加任意Title,在Key文本框中粘贴id_rsa.pub文件的内容。
				mac:复制 ssh key到粘贴板上
				pbcopy < ~/.ssh/id_rsa.pub
				windows:复制 ssh key到粘贴板上
				clip < ~/.ssh/id_rsa.pub
				linux:复制 ssh key到粘贴板上
				sudo apt-get install xclip
				xclip -sel clip < ~/.ssh/id_rsa.pub
			2、多个github帐号的SSH key切换
				1、生成第二个ssh key：
					$ ssh-keygen -t rsa -C "youremail@xxx.com"
				 	提示：不要一路回车，否则会覆盖前面创建的第一个ssh key
				2、如果生成的第二个ssh key不在.ssh/下，可以移动到此目录
				3、在.ssh/下创建config文件，内容如下：
					Host github.com
  						HostName github.com
  						PreferredAuthentications publickey
  						IdentityFile ~/.ssh/id_rsa
					Host my.github.com
  						HostName github.com
  						PreferredAuthentications publickey
  						IdentityFile ~/.ssh/my
				4、测试配置是否正确
					ssh -T git@github.com
				5、本地已经创建或已经clone到本地：
					1、打开.git/config文件
						#更改[remote "origin"]项中的url中的
						#my.github.com 对应上面配置的host
						[remote "origin"]
  							url = git@my.github.com:itmyline/blog.git
					或者在Git Bash中提交的时候修改remote
						$ git remote rm origin
						$ git remote add origin git@my.github.com:itmyline/blog.git
					2、clone仓库时对应配置host对应的账户
						#my.github.com对应一个账号
						git clone git@my.github.com:username/repo.git
		3、登录github，右上角"Create a new repo"	按钮，创建一个新的仓库。
			1、在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
			2、命令：git remote add origin git@github.com:michaelliao(github账号)/learngit.git		//关联远程库origin
			3、命令：git push -u origin master					//把本地库的内容推送到远程，-u第一次推送，关联远程库和本地库的master分支
			4、命令：git push origin master							//推送本地库到远程库
			5、ssh警告
					当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
					这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，
					需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
			6、总结：要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
						关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
						此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
						分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！
						当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！
	2、从远程库克隆：
		1、登录github账号创建一个新的远程库，
		2、勾选Initialize this repository with a README，产生一个新的README.md文件
		3、命令：git clone git@github.com:michaelliao(github账号)/gitskills.git
		4、使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
		5、总结：要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
							Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
六、分支管理：
	1、创建与合并分支：
		1、命令：git checkout -b dev									//创建一个新分支并切换到新分支dev上
				等同于：命令：git branch dev							//创建一个新分支dev
						命令：git checkout dev						//切换到新分支dev上
		2、命令：git branch											//列出所有分支，当前分支前会出现一个*号
				git branch -a 										//查看所有的分支
				git branch -r 										//查看远程所有分支
		3、命令：git checkout master									//切换到主分支上
				注意：提交的内容在dev分支上，如果没有分支合并，则不会在当前分支上显示提交的内容
		4、命令：git merge dev												//dev分支上的工作完成后，执行分支合并
				提示：Updating d17efd8..fec145a
					Fast-forward											//表示快速合并
 					readme.txt |    1 +
 					1 file changed, 1 insertion(+)
 		5、命令：git branch -d dev										//删除分支dev
		6、总结：Git鼓励大量使用分支：
					查看分支：git branch
					创建分支：git branch <name>
					切换分支：git checkout <name>
					创建+切换分支：git checkout -b <name>
					合并某分支到当前分支：git merge <name>
					删除分支：git branch -d <name>
	2、解决冲突：
		1、dev分支修改提交的内容，主分支修改提交的内容，进行分支合并时冲突，vi  readme.txt
		2、
			Git is a distributed version control system.
			Git is free software distributed under the GPL.
			Git has a mutable index called stage.
			Git tracks changes of files.
			<<<<<<< HEAD
			Creating a new branch is quick & simple.
			=======
			Creating a new branch is quick AND simple.
			>>>>>>> feature1
			2.1、Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存：
			Creating a new branch is quick and simple.
			2.2、再提交：
		3、 git log --graph --pretty=oneline --abbrev-commit				//查看分支合并图
	3、分支管理策略：
		1、禁用Fast forward模式
			参数：--no-ff
			首先创建一个dev，修改readme.txt文件，并提交一个commit；
			切换到master分支上，
			命令：git merge --no-ff -m "merge with no-ff" dev			//因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
			命令：git log --graph --pretty=oneline --abbrev-commit		//查看分支历史
		2、总结：Git分支十分强大，在团队开发中应该充分应用。
			合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
			而fast forward合并就看不出来曾经做过合并。
	4、Bug分支管理：暂存区：
		1、命令：git stash								//将当前分支修改内容临时暂存起来。
		2、切换到别的分支进行Bug处理，修改内容，提交commit，合并修复Bug的临时分支并删除。
		3、切换到工作分支：git status 为空，因为工作分支被暂存了，使用下面命令查看
			命令：git stash list							//显示暂存区列表信息
		4、恢复暂存区的内容到工作分支上：
			方法一：
				命令：git stash apply		//但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
			方法二：
				命令：git stash pop			//恢复的同时把stash内容也删了；
		5、可以使用git stash多次暂存，恢复时使命令：git stash apply stash@{0}
		6、总结：修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
				当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
	5、	Feature分支：
		1、	删除一个没有合并过的分支：
			命令：git branch -D <name>			//强行删除指定没有合并过的分支
	6、多人协作：
		1、推送分支：
			1、命令：git remote	-v					//查看远程信息，参数-v显示更详细的信息
			2、命令：git push origin <master>			//推送本地的主分支到远程库，也可以推送其他分支dev
			3、远程推送分支原则：
				1、master分支是主分支，因此要时刻与远程同步；
				2、dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
				3、bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
				4、feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
		2、抓取分支：
			1、首先，可以试图用git push origin branch-name推送自己的修改；
				如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
				如果合并有冲突，则解决冲突，并在本地提交；
				没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
				如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
				用命令git branch --set-upstream branch-name origin/branch-name。
				这就是多人协作的工作模式，一旦熟悉了，就非常简单。
		3、总结：
				查看远程库信息，使用git remote -v；
				本地新建的分支如果不推送到远程，对其他人就是不可见的；
				从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
				在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
				建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
				从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
七、标签管理：
	1、创建标签：默认标签是打在最新提交的commit上的。
			1、 命令：git tag <name>																							//创建一个标签
					命令：git tag																											//查看标签
					命令：git tag <name> <commit id>																	//给已经提交的修改创建标签
					命令：git show <tagname>																					//查看标签信息；标签不是按时间顺序列出，而是按字母排序的。
					命令：git tag -a v0.1 -m "version 0.1 released" 3628164						//创建带有说明的标签，用-a指定标签名，-m指定说明文字：
					命令：git tag -s v0.2 -m "signed version 0.2 released" fec145a		//可以通过-s用私钥签名一个标签：
					提示：签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：
						gpg: signing failed: secret key not available
						error: gpg failed to sign the data
						error: unable to sign the tag
					用PGP签名的标签是不可伪造的，因为可以验证PGP签名
			2、总结：
					命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
					git tag -a <tagname> -m "blablabla..."可以指定标签信息；
					git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
					命令git tag可以查看所有标签。
	2、操作标签：
			1、 命令：git tag -d v0.1											//删除标签，因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
					命令：git push origin <tagname>						//推送某个标签到远程，
					命令：git push origin --tags							//一次性推送所有标签到远程库。
			注意：如果标签已经推送到远程库，首先删除本地库的标签，然后从远程库删除
					命令：git tag -d v0.9											//先删除本地库的标签
					命令：git push origin :refs/tags/v0.9			//从远程库中删除标签
			2、总结：
					命令git push origin <tagname>可以推送一个本地标签；
					命令git push origin --tags可以推送全部未推送过的本地标签；
					命令git tag -d <tagname>可以删除一个本地标签；
					命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
八、使用GitHub：
	1、总结：
			在GitHub上，可以任意Fork开源仓库；
			自己拥有Fork后的仓库的读写权限；
			可以推送pull request给官方仓库来贡献代码。
九、自定义Git：
			1、命令：git config --global color.ui true						//让Git显示颜色，会让命令输出看起来更醒目：
	1、忽略特殊文件：
			1、有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，
						比如保存了数据库密码的配置文件啦，等等，每次git status都会显示Untracked files ...，有强迫症的童鞋心里肯定不爽。
				好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的.gitignore文件，
						然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
				不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。
			2、忽略原则：
				1、忽略操作系统自动生成的文件，比如缩略图等；
				2、忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
				3、忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
			3、提交忽略文件内容.gitignore
				命令：git add -f App.class											//强制添加到git
				命令：git check-ignore -v App.class							//检查忽略文件的错误。
	2、配置别名：
			1、命令：git config --global alias.st status			//给status配置别名
							$ git config --global alias.co checkout
							$ git config --global alias.ci commit
							$ git config --global alias.br branch
			2、命令：git config --global alias.unstage 'reset HEAD'		//给撤销配置别名
							$ git unstage test.py ===== $ git reset HEAD test.py
			3、每个仓库的Git配置文件都放在.git/config文件中：
					而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：
			4、命令：cat .git/config
	3、搭建Git服务器：
			第一步，安装git：$ sudo apt-get install git
			第二步，创建一个git用户，用来运行git服务：$ sudo adduser git
			第三步，创建证书登录：
							收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，
							把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
			第四步，初始化Git仓库：
					1、先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
							$ sudo git init --bare sample.git
					2、Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，
							所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。
							然后，把owner改为git：
							$ sudo chown -R git:git sample.git
			第五步，禁用shell登录：
					1、出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
							git:x:1001:1001:,,,:/home/git:/bin/bash 改为下面命令：
							git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
						这样，git用户可以正常通过ssh使用git，但无法登录shell，
						因为我们为git用户指定的git-shell每次一登录就自动退出。
			第六步，克隆远程仓库：
						$ git clone git@server:/srv/sample.git
					1、管理公钥：
							人数少时：服务器的/home/git/.ssh/authorized_keys文件
							人数多时：可以用Gitosis来管理公钥
					2、管理权限：
						因为Git支持钩子（hook），
						所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。
						Gitolite就是这个工具。
					3、总结：
							搭建Git服务器非常简单，通常10分钟即可完成；
							要方便管理公钥，用Gitosis；
							要像SVN那样变态地控制权限，用Gitolite。


初始化配置
	#配置使用git仓库的人员姓名
	git config --global user.name "Your Name Comes Here"

	#配置使用git仓库的人员email
	git config --global user.email you@yourdomain.example.com

	#配置到缓存 默认15分钟
	git config --global credential.helper cache

	#修改缓存时间
	git config --global credential.helper 'cache --timeout=3600'

	git config --global color.ui true
	git config --global alias.co checkout
	git config --global alias.ci commit
	git config --global alias.st status
	git config --global alias.br branch
	git config --global core.editor "mate -w"    # 设置Editor使用textmate
	git config -1 #列举所有配置
	#用户的git配置文件~/.gitconfig

查看、添加、提交、删除、找回，重置修改文件
	git help <command>  # 显示command的help
	git show            # 显示某次提交的内容
	git show $id

	git co  -- <file>   # 抛弃工作区修改
	git co  .           # 抛弃工作区修改

	git add <file>      # 将工作文件修改提交到本地暂存区
	git add .           # 将所有修改过的工作文件提交暂存区
	git add --patch			#	来部分暂存文件

	git rm <file>       # 从版本库中删除文件
	git rm <file> --cached  # 从版本库中删除文件，但不删除文件

	git reset <file>    # 从暂存区恢复到工作文件
	git reset -- .      # 从暂存区恢复到工作文件
	git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改

	git ci <file>
	git ci .
	git ci -a           # 将git add, git rm和git ci等操作都合并在一起做
	git ci -am "some comments"
	git ci --amend      # 修改最后一次提交记录

	git revert <$id>    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象
	git revert HEAD     # 恢复最后一次提交的状态

查看文件diff
	git diff <file>     # 比较当前文件和暂存区文件差异
	git diff
	git diff <$id1> <$id2>   # 比较两次提交之间的差异
	git diff <branch1>..<branch2> # 在两个分支之间比较
	git diff --staged   # 比较暂存区和版本库差异
	git diff --cached   # 比较暂存区和版本库差异
	git diff --stat     # 仅仅比较统计信息
	git diff --check  	#它将会找到可能的空白错误并将它们为你列出来。

查看提交记录
	git log
	git log <file>      # 查看该文件每次提交记录
	git log -p <file>   # 查看每次详细修改内容的diff
	git log -p -2       # 查看最近两次详细修改内容的diff
	git log --stat      #查看提交统计信息

取得Git仓库
	#初始化一个版本仓库
	git init

	#Clone远程版本库
	git clone git@xbc.me:wordpress.git

	#添加远程版本库origin，语法为 git remote add [shortname] [url]
	git remote add origin git@xbc.me:wordpress.git

	#查看远程仓库
	git remote -v

提交你的修改
	#添加当前修改的文件到暂存区
	git add .

	#如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件
	git add -u
	
	git commit --verbose				#列出diff的结果。

	#提交你的修改
	git commit –m "你的注释"

	#推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支]
	git push origin master

	#查看文件状态
	git status

	#跟踪新文件
	git add readme.txt

	#从当前跟踪列表移除文件，并完全删除
	git rm readme.txt

	#仅在暂存区删除，保留文件在当前目录，不再跟踪
	git rm –cached readme.txt

	#重命名文件
	git mv reademe.txt readme

	#查看提交的历史记录
	git log

	#修改最后一次提交注释的，利用–amend参数
	git commit --amend

	#忘记提交某些修改，下面的三条命令只会得到一个提交。
	git commit –m &quot;add readme.txt&quot;
	git add readme_forgotten
	git commit –amend

	#假设你已经使用git add .，将修改过的文件a、b加到暂存区

	#现在你只想提交a文件，不想提交b文件，应该这样
	git reset HEAD b

	#取消对文件的修改
	git checkout –- readme.txt

查看、切换、创建和删除分支
	git br -r           # 查看远程分支
	git br <new_branch> # 创建新的分支
	git br -v           # 查看各个分支最后提交信息
	git br --merged     # 查看已经被合并到当前分支的分支
	git br --no-merged  # 查看尚未被合并到当前分支的分支

	git co <branch>     # 切换到某个分支
	git co -b <new_branch> # 创建新的分支，并且切换过去
	git co -b <new_branch> <branch>  # 基于branch创建新的new_branch

	git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
	git co $id -b <new_branch>  # 把某次历史提交记录checkout出来，创建成一个分支

	git br -d <branch>  # 删除某个分支
	git br -D <branch>  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)

分支合并和rebase
	git merge <branch>               # 将branch分支合并到当前分支
	git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交

	git rebase master <branch>       # 将master rebase到branch，相当于：
	git co <branch> && git rebase master && git co master && git merge <branch>

Git补丁管理(方便在多台机器上开发同步时用)
	git diff > ../sync.patch         # 生成补丁
	git apply ../sync.patch          # 打补丁
	git apply --check ../sync.patch  #测试补丁能否成功

Git暂存管理
	git stash                        # 暂存
	git stash list                   # 列所有stash
	git stash apply                  # 恢复暂存的内容
	git stash drop                   # 删除暂存区

Git远程分支管理
	git pull                         # 抓取远程仓库所有分支更新并合并到本地
	git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
	git pull <远程主机名> <远程分支名>:<本地分支名> 
	取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。
	git pull origin next:master
	git fetch origin                 # 抓取远程仓库更新
	git merge origin/master          # 将远程主分支合并到本地当前分支
	git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支
	git co -b <local_branch> origin/<remote_branch>  # 基于远程分支创建本地分支，功能同上

	git push                         # push所有分支
	git push origin master           # 将本地主分支推到远程主分支
	git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
	git push origin <local_branch>   # 创建远程分支， origin是远程仓库名
	git push origin <local_branch>:<remote_branch>  # 创建远程分支
	git push origin :<remote_branch>  #先删除本地分支(git br -d <branch>)，然后再push删除远程分支

基本的分支管理
	#创建一个分支
	git branch iss53

	#切换工作目录到iss53
	git chekcout iss53

	#将上面的命令合在一起，创建iss53分支并切换到iss53
	git chekcout –b iss53

	#合并iss53分支，当前工作目录为master
	git merge iss53

	#合并完成后，没有出现冲突，删除iss53分支
	git branch –d iss53

	#拉取远程仓库的数据，语法为 git fetch [remote-name]
	git fetch

	#fetch 会拉取最新的远程仓库数据，但不会自动到当前目录下，要自动合并
	git pull

	#查看远程仓库的信息
	git remote show origin

	#建立本地的dev分支追踪远程仓库的develop分支
	git checkout –b dev origin/develop

Git远程仓库管理
	git remote -v                    # 查看远程服务器地址和仓库名称
	git remote show origin           # 查看远程服务器仓库状态
	git remote add origin git@ github:robbin/robbin_site.git         # 添加远程仓库地址
	git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)
	git remote rm <repository>       # 删除远程仓库

创建远程仓库
	git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库
	scp -r my_project.git git@ git.csdn.net:~      # 将纯仓库上传到服务器上

	mkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库
	git remote add origin git@ github.com:robbin/robbin_site.git    # 设置远程仓库地址
	git push -u origin master                                      # 客户端首次提交
	git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track

	git remote set-head origin master   # 设置远程仓库的HEAD指向master分支

也可以命令设置跟踪远程库和本地库
	git branch --set-upstream master origin/master
	git branch --set-upstream develop origin/develop

Rerere 是“重用已记录的冲突解决方案（reuse recorded resolution）”的意思——它是一种简化冲突解决的方法。 当启用 rerere 时，Git 将会维护一些成功合并之前和之后的镜像，当 Git 发现之前已经修复过类似的冲突时，便会使用之前的修复方案，而不需要你的干预。

$ git config --global rerere.enabled true

cat <filename>  #查看文件内容

签署工作：
$ gpg --list-keys

搜索：
$ git grep -n gmtime_r
	#你可以很方便地从提交历史或者工作目录中查找一个字符串或者正则表达式。
	#你可以传入 -n 参数来输出 Git 所找到的匹配行行号。
$ git grep --count gmtime_r
	#你可以使用 --count 选项来使 Git 输出概述的信息
git 调试：
	文件标注：
		$ git blame (-c) -L 12,22 simplegit.rb 	
			#使用 -L 选项来限制输出范围在第12至22行：
			# -C，Git 会分析你正在标注的文件，并且尝试找出文件中从别的地方复制过来的代码片段的原始出处。
	二分查找：
		$ git bisect start			#启动
		$ git bisect bad				#告诉系统当前你所在的提交是有问题的
		$ git bisect good v1.0 	#告诉 bisect 已知的最后一次正常状态是哪次提交
		$ git bisect reset      #重置你的 HEAD 指针到最开始的位置


















