Sass基础篇:
一、Sass定义
  1、定义：Sass是最早的CSS预处理语言，采用Ruby语言编写。
  2、与Scss的区别：
    Sass语法以严格的缩进式语法规则书写，不包括大括号({})和分号(;)，文件扩展名为.sass
    Scss语法和CSS的语法相近，文件扩展名为.scss
二、Sass安装环境
  3、安装：
    1、Mac: 基于Ruby环境安装
      1、sudo gem install sass  //安装包：sudo gem install /安装包路径/
      2、sass -v     /*检测sass版本*/
      3、sass --watch test.scss:test.css     /*编译sass文件*/
      4、
    2、window：
      1、命令行: 
          gem install sass
      2、通过compass来安装sass：
          sudo gem install sass
      3、淘宝RubyGems镜像安装Sass：
          第一步：移除默认的源：gem sources --remove https://rubygems.org/
          第二步：指定淘宝的源：gem sources -a https://ruby.taobao.org/
          第三步：查看指定源：gem sources -1
          第四步：gem install sass
    3、更新：gem update sass
    4、卸载删除Sass：gem uninstall sass
三、Sass的语法格式及编译调试
  4、Sass编译：不支持GBK编码、中文字符，防止编译错误。
    1、命令编译:
      单文件编译:  sass <要编译的Sass文件路径>/style.scss:<要输出CSS文件路径>/style.css
      多文件编译:  sass sass/:css/
      实时编译: sass --watch sass/:css/
    2、GUI工具编译:
      Koala (http://koala-app.com/)
      CodeKit（https://incident57.com/codekit/index.html）
      Compass.app（http://compass.kkbox.com/）
      Scout（http://mhs.github.io/scout-app/）
      Prepros（https://prepros.io/）
      /*推荐*/
      Koala (http://www.w3cplus.com/preprocessor/sass-gui-tool-koala.html) 
      CodeKit (http://www.w3cplus.com/preprocessor/sass-gui-tool-codekit.html)
    3、自动化编译
      Gulp
      Grunt
  5、输出方法
    1、嵌套输出方式 nested
      sass --watch test.scss:test.css --style nested 
      /*示例：*/
      body div {
        width: 100px;
        height: 100px;}
    2、展开输出方式 expanded
      sass --watch test.scss:test.css --style expanded  /*输出方式和nested类似，只是结束大括号在另起一行*/
      /*示例：*/
      body div {
        width: 100px;
        height: 100px;
      }
    3、紧凑输出方式 compact
      sass --watch test.scss:test.css --style compact
      /*示例：*/
      body div {width: 100px;height: 100px;}
    4、压缩输出方式 compressed
      sass --watch test.scss:test.css --style compressed
      /*示例：*/
      body div{width:100px;height:100px;}body p{width:100px;height:100px;}
  6、调试
    1、可以在浏览器中直接调试Sass文件，并找到对应的行数，早期版本需要加--sourcemap参数.
      sass --watch --scss --sourcemap test.scss:test.css
四、Sass的基本特性-基础
  7、变量: $basewidth: 100px; /*变量声明符/变量名称/变量值;*/
    1、普通变量: 定义之后可以在全局范围内使用;
    2、默认变量: $basewidth: 100px !default; /*如果值后面加上!default则表示默认值。*/
      覆盖默认值的方式在声明默认变量之前重新声明一下即可;
    3、局部变量:在样式范围之内、选择器、函数之内定义的为局部变量;
    4、全局变量:在样式范围之外定义的变量;
    5、变量的声明:
      1、该值至少重复出现了两次；
      2、该值至少可能会被更新一次；
      3、该值所有的表现都与变量有关（非巧合）。
  8、嵌套
    1、选择器嵌套
      header nav a {color: #e43937;}
    2、属性嵌套: 属性前缀相同，后缀不一样，
      .box {
        border: {
          top: 1px solid #ddd; 
          bottom: 1px solid #ddd;
        }
      }
    3、伪类嵌套: 需要借助"&"符号一起配合使用。
      .clearfix {
        &:before, &:after {
          content: "";
          display: table;
        }
        &:after {
          clear: both;
          overflow: hidden;
        }
      }
    4、嵌套注意问题: 尽量避免使用过长的嵌套，层级越深，可读性越差;
  9、混合宏: 代码中有少量的样式复用可使用变量方式，有大段的样式的复用可使用混合宏
    1、声明混合宏: 使用关键字 @mixin;
      @mixin 混合宏名称{}
    2、带参数的混合宏: 
      @mixin 混合宏名称(参数名称: 参数值){}
    3、复杂的混合宏: 判断参数列表的个数如果大于等于1;
      @mixin 混合宏名称(参数列表...){
        @if length($shadow) >= 1{
          ...
        }@else{
          ...
        }
      }
    4、混合宏的的调用: 使用关键字 @include;
      div {@include 混合宏名称;}
      div {@include 混合宏名称(参数列表);}
  10、扩展/继承
    1、@extend 选择器名称; 编译之后形成组合选择器;
      .btn {border: 1px solid #ddd;color: red;@extend .clearfix;}
  11、占位符
    1、%placeholder: 如果声明不被@extend调用则不会被编译成任何代码,编译后的代码会把相同的代码合并在一起。
      %mt5 {margin-top: 5px;}
  12、混合宏、继承、占位符的优缺点: 
    1、混合宏可以传递参数，但是编译之后不会把相同的代码合并，造成代码冗余。
      如果代码块中涉及到变量，建议使用混合宏来创建相同的代码块。
    2、继承编译之后会将相同的代码块进行合并，但是不能传递参数。
      如果代码块中不需要传递任何参数，而且一个基类已在文件中存在，那么建议使用继承方式。
    3、占位符编译之后和继承基本上相同，只是不会生成占位符的选择器，
      1、和继承的区别: 
        1、占位符不调用的时候不会在CSS文件中产生任何代码。
        2、继承首先要有一个基类存在，基类的样式都将出现在编译出来的CSS代码中。
    4、总结:  
                      混合宏               继承                占位符
      声明方式        @mixin               .base             %placeholder
      调用方式       @include              @extend              @extend
  13、插值#{}: 如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。
    @mixin generate-sizes($class, $small, $medium, $big) {
      .#{$class}-small { font-size: $small; }
      .#{$class}-medium { font-size: $medium; }
      .#{$class}-big { font-size: $big; }
    }
    @include generate-sizes("header-text", 12px, 20px, 40px);
  14、注释
    1、CSS注释: /*注释内容*/;会被编译出来。
    2、JS注释: //;不会被编译出来。
  15、数据类型
    1、数字: 如，1、 2、 13、 10px;
    2、字符串: 有引号字符串或无引号字符串，如，"foo"、 'bar'、 baz;
    3、颜色: 如，blue、 #04a3f9、 rgba(255,0,0,0.5);
    4、布尔型: 如，true、 false;
    5、空值: 如，null;
    6、值列表: 用空格或者逗号分开，如，1.5em 1em 0 2em 、 Helvetica, Arial, sans-serif;
  16、字符串
    1、有引号字符串(quoted strings);如 "Lucida Grande" 、'http://sass-lang.com';
    2、无引号字符串 (unquoted strings)，如 sans-serifbold。
    3、特例: 使用 #{ }插值语句 (interpolation) 时，有引号字符串将被编译为无引号字符串，这样方便了在混合指令 (mixin) 中引用选择器名。
    4、当 deprecated = property syntax 时 （暂时不理解是怎样的情况），所有的字符串都将被编译为无引号字符串，不论是否使用了引号。
  17、值列表
    1、nth函数（nth function） 可以直接访问值列表中的某一项；
    2、join函数（join function） 可以将多个值列表连结在一起；
    3、append函数（append function） 可以在值列表中添加值； 
    4、@each规则（@each rule） 则能够给值列表中的每个项目添加样式。
五、Sass的基本特性-运算
  18、加减乘除: 不同类型的单位运算时会编译错误;
    1、加减法运算时碰到不同类型的单位时，编译会报错。
    2、乘法运算时一个单位同时声明两个值时会有问题，进行乘法运算时，两个值单位相同时，只需要为一个数值提供单位即可
    3、除法运算时，如果两个值带有相同的单位值时，除法运算之后会得到一个不带单位的数值。
      '/'符号被当作除法运算符时有以下几种情况:
        1、如果数值或它的任意部分是存储在一个变量中或是函数的返回值。
        2、如果数值被圆括号包围。
        3、如果数值是另一个数学表达式的一部分。
      div {font: 8px/2px;} /*纯 CSS，不是除法运算*/
  19、变量计算:
  20、数字运算
  21、颜色运算:
    1、所有算数运算都支持颜色值，并且是分段运算的。也就是说，红、绿和蓝各颜色分段单独进行运算。
  22、字符运算: 
    1、可以通过加法符号“+”来对字符串进行连接。
    2、有符号字符串和无符号字符串之间的'+'运算结果以'+'左侧的字符串类型为准。
Sass进阶篇:
一、Sass的控制命令
  1、@if: 是一个SassScript，可以根据条件来处理样式块。
      @if { 样式块 }@else if { 样式块 }@else{ 样式块 }
  2、@for: 
    1、@for $i from <start> through <end>  /*$i 表示变量, start表示起始值，end表示结束值*/
    2、@for $i from <start> to <end>   /*through 表示包含end这个数，to 表示不包含end这个数*/
        $grid-prefix: span !default;
        $grid-width: 60px !default;
        $grid-gutter: 20px !default;
        %grid {
          float: left;
          margin-left: $grid-gutter / 2;
          margin-right: $grid-gutter / 2;
        }
        @for $i from 1 through 12 {
          .#{$grid-prefix}#{$i}{
            width: $grid-width * $i + $grid-gutter * ($i - 1);
            @extend %grid;
          }  
        }
  3、@while 
        $types: 4;
        $type-width: 20px;
        @while $types > 0 {
          .while-#{$types} {
            width: $type-width + $types;
          }
          $types: $types - 1;
        }
  4、@each: 循环就是去遍历一个列表，然后从列表中取出对应的值。
        @each 循环指令的形式: @each $var in <list>
        $list: adam john wynn mason kuroir;//$list 就是一个列表
        @mixin author-images {
          @each $author in $list {
            .photo-#{$author} {
              background: url("/images/avatars/#{$author}.png") no-repeat;
            }
          }
        }
        .author-bio {
          @include author-images;
        }
二、Sass的函数功能-字符串和数字函数
  1、字符串函数: 用来出黎字符串的函数，
    1、unquote($string): 删除字符串中的引号,只能删除字符串中最前和最后的引号,没有则返回本身;
      .test {content: unquote('"Hello World!"');}
    2、quote($string): 给字符串添加引号,如果字符串自身带有引号会统一换成双引号,
                      如果字符串中间有单引号或者空格时,需要先使用单引号或者双引号括起来，否则会编译错误;
      .test {content: quote(Hello World!);} /*编译错误*/
    3、To-upper-case(): 将字符串小写字母转换成大写字母;
      .test {content; to-upper-case(Hello-World);}
    4、To-lower-case(): 将字符串大写字母转换成小写字母;
      .test {content: to-lower-case(hELLO-wORLD);}
  2、数字函数
    1、percentage($value): 将一个不带单位的数转换成百分比值,带单位则编译错误;
      percentage(.2);
    2、round($value): 将数值四舍五入，转换成一个最接近的整数,可以携带单位的任何数值;
      round(3px / 2em);
    3、ceil($value): 将大于自己的小数转换成下一位整数;
    4、floor($value): 将一个数去除他的小数部分;
    5、abs($value): 返回一个数的绝对值;
    6、min($numbers…): 找出几个数值之间的最小值,不能同时出现不同类型的单位;
      min(1px,2px,20px);
      min(1px,1em); /*编译错误*/
    7、max($numbers…): 找出几个数值之间的最大值,不能同时出现不同类型的单位;
      max(3px,20px,5px,76px);
      max(1,3px,5%,6em); /*编译错误*/
    8、random(): 获取随机数
  3、列表函数
    1、length($list): 返回一个列表的长度值,列表参数之间只能使用空格不能使用逗号;
      length(10px 2px 1 (border 1px solid) 5em); /*5*/
      length(10px,2px,1,5em); /*编译错误*/
    2、nth($list, $n): 返回一个列表中指定的某个标签值,$n 必须是大于 0 的整数;
      nth((Helvetica,Arial,sans-serif),2);/*Arial*/
      nth((1px solid red) border-top green 1 ,0);/*编译错误*/
    3、join($list1, $list2, [$separator]): 将两个列给连接在一起，变成一个列表,如果直接连接两个以上的列表将会报错;
      1、如果列表中的第一个列表中每个值之间使用的是逗号（,），那么 join() 函数合并的列表中每个列表项之间使用逗号,分隔;
      2、但当第一个列表中只有一个列表项，那么 join() 函数合并的列表项目中每个列表项目这间使用的分隔符号会根据第二个列表项中使用的，
          如果第二列表项中使用是,分隔，则使用逗号分隔；如果第二列项之间使用的空格符，则使用空格分隔;
      3、如果列表中的第一个列表中每个值之间使用的是空格，那么 join() 函数合并的列表中每个列表项之间使用空格分隔;
      4、如果当两个列表中的列表项小于1时，将会以空格分隔;
      join((blue red),(#abc, #def),(#dee #eff));/*编译错误,列表个数超限*/
    4、append($list1, $val, [$separator]): 将某个值放在列表的最后;
      1、如果列表只有一个列表项时，那么插入进来的值将和原来的值会以空格的方式分隔;
      2、如果列表中列表项是以空格分隔列表项，那么插入进来的列表项也将以空格分隔;
      3、如果列表中列表项是以逗号分隔列表项，那么插入进来的列表项也将以逗号分隔;
    5、zip($lists…): 将几个列表结合成一个多维的列表,使用zip()函数时，每个单一的列表个数值必须是相同的;
      zip(1px 2px 3px,solid dashed dotted,green blue red);
      /*((1px "solid" #008000), (2px "dashed" #0000ff), (3px "dotted" #ff0000))*/
      zip(1px 2px 3px, solid , green blue red);/*编译错误*/
    6、index($list, $value): 返回一个值在列表中的位置值,未找到则返回false。
      index(1px solid red,solid);/*2*/
      index(1px solid red,dotted) /*false,列表中没有找到 dotted*/
  4、Introspection函数
    1、type-of($value): 返回一个值的类型;
      返回值类型: 1、number 为数值型。
                  2、string 为字符串型。
                  3、bool 为布尔型。
                  4、color 为颜色型。
      type-of(100px);/*number*/
      type-of(blue);/*color*/
    2、unit($number): 返回一个值的单位,如果碰到复杂的计算时,只允许乘、除运算;
      1、但加、减碰到不同单位时，unit() 函数将会报错，除 px 与 cm、mm 运算之外；
        unit("100px");/*px*/
        unit(100);/*" "*/
        unit(10px * 3em);/*px*em*/
    3、unitless($number): 判断一个值是否带有单位,不带单位返回true,带单位的返回false;
        unitless(100);/*true*/ 
        unitless(1 / 2 + 2);/*true*/
        unitless(100%);/*false*/
        unitless(100em);/*false*/
    4、comparable($number-1, $number-2): 判断两个值是否可以做加、减和合并,可以返回true,否则返回false;
        comparable(2px,1%);/*false*/
        comparable(2px,1em);/*false*/
        comparable(2rem,1rem);/*false*/
        comparable(2px,1mm);/*true*/
  5、Miscellaneous函数: 三元条件函数,当条件为真时返回第一个值,否则返回第二个值;
      if($condition,$if-true,$if-false);
      if(true,1px,2px);
  6、Map: 数组/数据地图/JSON数据;
    1、用个 $ 加上命名空间来声明 map;
      $map: (
        key1: value1,
        key2: (
          key-1: value-1,
          key-2: value-2,
        ),
        key3: value3
      );
    2、Maps函数: 
      1、map-get($map,$key): 根据给定的 key 值，返回 map 中相关的值,如果$key不存在,则返回null值,null值不会被编译。
        $social-colors: (dribble: #ea4c89,facebook: #3b5998,github: #171515,google: #db4437,twitter: #55acee);
        .btn-dribble{color: map-get($social-colors,facebook);}
        /*.btn-dribble{color: #3b5998;}*/
      2、map-merge($map1,$map2): 将两个 map 合并成一个新的 map。
        $color: (text: #f36,link: #f63,border: #ddd,backround: #fff);
        $typo:(font-size: 12px,line-height: 1.6);
        $newmap: map-merge($color,$typo);
        /*$newmap:(text: #f36,link: #f63,border: #ddd,background: #fff,font-size: 12px,line-height: 1.6);*/
      3、map-remove($map,$key): 从 map 中删除一个 key，返回一个新 map。
        $map:map-remove($social-colors,dribble);
        /*$map:(facebook: #3b5998,github: #171515,google: #db4437,twitter: #55acee);*/
      4、map-keys($map): 返回 map 中所有的 key。
        map-keys($social-colors);
        /*"dribble","facebook","github","google","twitter"*/
      5、map-values($map): 返回 map 中所有的 value。
        map-values($social-colors);
        /*#ea4c89,#3b5998,#171515,#db4437,#55acee*/
      6、map-has-key($map,$key): 根据给定的 key 值判断 map 是否有对应的 value 值，如果有返回 true，否则返回 false。
        @if map-has-key($social-colors,facebook){
          .btn-facebook {
            color: map-get($social-colors,facebook);
          }
        } @else {
          @warn "No color found for faceboo in $social-colors map. Property ommitted."
        }
        /*.btn-facebook {color: #3b5998;}*/
      7、keywords($args): 返回一个函数的参数，这个参数可以动态的设置 key 和 value,动态创建map的函数,参数也是成对出现。
        @mixin map($args...){@debug keywords($args);}
        @include map($dribble: #ea4c89,$facebook: #3b5998,$github: #171515,$google: #db4437,$twitter: #55acee);
        /*DEBUG: (dribble: #ea4c89, facebook: #3b5998, github: #171515, google: #db4437, twitter: #55acee)*/
  7、颜色函数
    1、RGB颜色函数:颜色只是颜色中的一种表达式;
      sass -i /*开启Sass函数计算*/
      1、rgb($red,$green,$blue)：根据红、绿、蓝三个值创建一个颜色；
      2、rgba($red,$green,$blue,$alpha)：根据红、绿、蓝和透明度值创建一个颜色；
      3、red($color)：从一个颜色中获取其中红色值；
      4、green($color)：从一个颜色中获取其中绿色值；
      5、blue($color)：从一个颜色中获取其中蓝色值；
      6、mix($color-1,$color-2,[$weight])：把两种颜色混合在一起,$weight 为 合并的比例（选择权重），默认值为 50%，其取值范围是 0~1 之间。。
        mix(#c82858,rgba(200,40,80,.65),.3);
        /*rgba(200, 40, 80, 0.65105)*/
    2、HSL函数:
      1、hsl($hue,$saturation,$lightness)：通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色；
      2、hsla($hue,$saturation,$lightness,$alpha)：通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色；
      3、hue($color)：从一个颜色中获取色相（hue）值；
      4、saturation($color)：从一个颜色中获取饱和度（saturation）值；
      5、lightness($color)：从一个颜色中获取亮度（lightness）值；
      6、adjust-hue($color,$degrees)：通过改变一个颜色的色相值，创建一个新的颜色,
          他需要一个颜色和色相度数值。通常这个度数值是在 -360deg 至 360deg 之间;
          .adjust-hue-deg {background: adjust-hue($baseColor,30deg);}
          .adjust-hue-per {background: adjust-hue($baseColor,30%);}
      7、lighten($color,$amount)：通过改变颜色的亮度值，让颜色变亮，创建一个新的颜色;
          这个亮度值可以是 0~1 之间，不过常用的一般都在 3%~20% 之间。
        .lighten {background: lighten($baseColor,10%);}
      8、darken($color,$amount)：通过改变颜色的亮度值，让颜色变暗，创建一个新的颜色;
        .darken{background: darken($baseColor,10%);}
      9、saturate($color,$amount)：(增加)通过改变颜色的饱和度值，让颜色更饱和，从而创建一个新的颜色
        .saturate {background: saturate($baseColor,30%);} /*在原色饱和度基础上增加饱和度*/
      10、desaturate($color,$amount)：(减少)通过改变颜色的饱和度值，让颜色更少的饱和，从而创建出一个新的颜色；
        .desaturate {background: desaturate($baseColor,30%);}/*在原色饱和度基础上减少饱和度*/
      11、grayscale($color)：将一个颜色变成灰色,这个函数会颜色的饱和度值直接调至 0%,相当于desaturate($color,100%);
      12、complement($color)：返回一个补充色，相当于adjust-hue($color,180deg);
      13、invert($color)：反回一个反相色，红、绿、蓝色值倒过来，而透明度不变。
  8、Opacity函数
    1、alpha($color) /opacity($color)：获取颜色透明度值,未指定透明度,则返回1;
      alpha(red[#e4393c]);
    2、rgba($color, $alpha): 改变颜色的透明度值;
      rgba(222,222,222,0.5);
    3、opacify($color, $amount) / fade-in($color, $amount)：使颜色更不透明,未指定透明度,则返回1；
      opacity(rgba(blue,.8));
    4、transparentize($color, $amount) / fade-out($color, $amount)：使颜色更加透明。
三、Sass的@规则:
  1、@import: 根据文件名引入,在少数几种情况下，它会被编译成 CSS 的 @import 规则。
    1、如果文件的扩展名是 .css。
    2、如果文件名以 http:// 开头。
    3、如果文件名是 url()。
    4、如果 @import 包含了任何媒体查询（media queries）。
  2、@media:
  3、@extend: 扩展选择器或者占位符。
  4、@at-root: 跳出根元素,当多个选择器嵌套多层之后,指定选择器跳出。
    .a {
      color: red;
      .b {
        color: orange;
        .c {
          color: yellow;
          @at-root .d {
            color: green;
          }
        }
      }  
    }
    .a {color: red;}
    .a .b {color: orange;}
    .a .b .c {color: yellow;}
    .d {color: green;}
  5、@debug: 输出出错信息。
    @debug 10em + 12em;
    /*Line 1 DEBUG: 22em*/
  6、@warn: 调试命令。
  7、@error: 调试命令。

